// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bookings    Booking[]
  
  @@map("users")
}

model Aircraft {
  id            String   @id @default(cuid())
  model         String
  manufacturer  String
  totalSeats    Int      @default(15)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  flights       Flight[]
  
  @@map("aircrafts")
}

model Flight {
  id                String   @id @default(cuid())
  flightNumber      String   @unique
  origin            String
  destination       String
  departureTime     DateTime
  arrivalTime       DateTime
  price             Float
  totalSeats        Int      @default(15)
  availableSeats    Int      @default(15)
  soldSeats         Int      @default(0)
  minimumSeats      Int      @default(5)
  status            FlightStatus @default(SCHEDULED)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  aircraftId        String
  aircraft          Aircraft @relation(fields: [aircraftId], references: [id])
  
  bookings          Booking[]
  
  @@map("flights")
}

model Booking {
  id                String        @id @default(cuid())
  passengerName     String
  passengerEmail    String
  seatsBooked       Int           @default(1)
  totalAmount       Float
  status            BookingStatus @default(PENDING)
  stripePaymentId   String?
  refunded          Boolean       @default(false)
  refundAmount      Float?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  
  flightId          String
  flight            Flight        @relation(fields: [flightId], references: [id])
  
  @@map("bookings")
}

enum FlightStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}
